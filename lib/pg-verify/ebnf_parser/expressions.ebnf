/*
    This grammar accepts a combination of 
    Note that boolean variables are not supported, thus
    this expression will be rejected: 'A && true'
*/

[1] Action ::= Assignment (';' Assignment)*
[2] Guard  ::= BoolExpr
[3] Precon ::= BoolExprsdf asdf
 
[4] Assignment  ::= VARIABLE ':=' AssExpr
[5] Expression  ::= BoolExpr | IntExpr
[6] AssExpr     ::= Expression | Value

[7] BoolExpr     ::= Equivalence
[9] Equivalence  ::= Implication (('<->' | '<!>') Implication)*
[11] Implication  ::= Disjunction ('->' Disjunction)*
[13] Disjunction  ::= Konjunction ('||' Konjunction)*
[15] Konjunction ::= Negation ('&&' Negation)*
[17] Negation    ::= '!' Comparison | Comparison

[19] Comparison ::= BOOL | Sum (CMPOP Sum)+

[21] IntExpr  ::= Sum
[23] Sum      ::= Product (('+' | '-') Product)*
[25] Product  ::= Value (('*' | '/') Value)*
[27] Value    ::= NUMBER | VARIABLE | '(' Expression ')'

[29] NUMBER   ::= '-'?[0-9]+
[31] BOOL     ::= 'true' | 'false' | '(' BoolExpr ')'
// Note that we do have to exclude 'true' & 'false' because otherwise 'true' & 'false'
// would be legal Integer expressions as they would be considered variables
[33] VARIABLE ::= [^('true' | 'false')][a-zA-Z_][a-zA-Z0-9_]* | [a-zA-Z_]
[35] CMPOP    ::= '<=' | '>=' | '<' | '>' | '==' | '!='
